# Core CI/CD Pipeline for Mobile Multi-Modal LLM
# This workflow provides comprehensive testing and validation

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  # =============================================================================
  # Code Quality and Linting
  # =============================================================================
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test]

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0

      - name: Run mypy type checking
        run: mypy src/ --junit-xml=reports/mypy.xml

      - name: Upload type check results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: type-check-results
          path: reports/mypy.xml

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o reports/bandit.json
          bandit -r src/ -f sarif -o reports/bandit.sarif

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: reports/bandit.sarif

      - name: Run Safety vulnerability check
        run: |
          safety check --json --output reports/safety.json
          safety check --output reports/safety.txt

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: reports/

  # =============================================================================
  # Multi-Platform Testing
  # =============================================================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test,mobile]

      - name: Run unit tests
        run: |
          pytest tests/unit/ --junitxml=reports/junit-unit.xml --cov=src --cov-report=xml

      - name: Run integration tests
        run: |
          pytest tests/integration/ --junitxml=reports/junit-integration.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: reports/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # =============================================================================
  # Mobile Build Validation
  # =============================================================================
  mobile-build:
    name: Mobile Build Validation
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[mobile]

      - name: Test Android export
        run: |
          python scripts/export_models.py --platform android --test-only

      - name: Test iOS export
        run: |
          python scripts/export_models.py --platform ios --test-only

      - name: Test ONNX export
        run: |
          python scripts/export_models.py --platform onnx --test-only

      - name: Validate mobile exports
        run: |
          python scripts/validate_mobile_exports.py

  # =============================================================================
  # Performance Benchmarking
  # =============================================================================
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test]

      - name: Run performance benchmarks
        run: |
          pytest tests/benchmarks/ --benchmark-only --benchmark-json=reports/benchmark.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: reports/benchmark.json

      - name: Comment benchmark results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const benchmark = JSON.parse(fs.readFileSync('reports/benchmark.json', 'utf8'));
            const body = `## ðŸ“Š Performance Benchmark Results
            
            | Test | Mean (ms) | Std Dev | Min | Max |
            |------|-----------|---------|-----|-----|
            ${benchmark.benchmarks.map(b => 
              `| ${b.name} | ${b.stats.mean.toFixed(2)} | ${b.stats.stddev.toFixed(2)} | ${b.stats.min.toFixed(2)} | ${b.stats.max.toFixed(2)} |`
            ).join('\n')}
            
            *Benchmarks run on: ${benchmark.machine_info.machine} ${benchmark.machine_info.processor}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # =============================================================================
  # Build Validation
  # =============================================================================
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine

      - name: Build package
        run: python -m build

      - name: Validate package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  # =============================================================================
  # Docker Build and Security
  # =============================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: mobile-multimodal-llm:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mobile-multimodal-llm:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test Docker image
        run: |
          docker run --rm mobile-multimodal-llm:latest python -c "import mobile_multimodal; print('OK')"

  # =============================================================================
  # Final Status Check
  # =============================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, security, test, mobile-build, build, docker]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.mobile-build.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.docker.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs succeeded"
          fi

      - name: Post success comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && success()
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… **CI Pipeline Passed**\n\nAll checks have passed successfully:\n- âœ… Code quality and linting\n- âœ… Security scanning\n- âœ… Multi-platform testing\n- âœ… Mobile build validation\n- âœ… Package building\n- âœ… Docker security scan\n\nThis PR is ready for review!'
            });