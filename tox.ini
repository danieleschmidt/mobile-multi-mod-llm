[tox]
# Tox configuration for comprehensive testing across environments
envlist = 
    py{310,311,312}
    lint
    security
    docs
    benchmark
    mobile
skip_missing_interpreters = true
isolated_build = true

[testenv]
# Default test environment configuration
deps = 
    -r{toxinidir}/requirements-dev.txt
    pytest-xdist[psutil]
extras = test
commands = 
    pytest {posargs:tests/ --cov --cov-report=term-missing}
setenv =
    PYTHONPATH = {toxinidir}/src
    TESTING = 1
passenv = 
    CI
    GITHUB_*
    CODECOV_*
    CUDA_VISIBLE_DEVICES

[testenv:lint]
# Code quality and linting
deps = 
    black
    isort
    flake8
    mypy
    pylint
commands = 
    black --check --diff src tests
    isort --check-only --diff src tests
    flake8 src tests
    mypy src
    pylint src/mobile_multimodal

[testenv:security]
# Security scanning and vulnerability assessment
deps = 
    bandit[toml]
    safety
    pip-audit
commands = 
    bandit -r src -f json -o bandit-report.json
    bandit -r src
    safety check --json --output safety-report.json
    safety check
    pip-audit --format=json --output=pip-audit-report.json
    pip-audit

[testenv:docs]
# Documentation building and validation
deps = 
    -r{toxinidir}/requirements.txt
    mkdocs
    mkdocs-material
    mkdocstrings[python]
commands = 
    mkdocs build --strict
    mkdocs serve --dev-addr 0.0.0.0:8000 &
    sleep 5
    curl -f http://localhost:8000 || exit 1

[testenv:benchmark]
# Performance benchmarking
deps = 
    {[testenv]deps}
    pytest-benchmark
    memory-profiler
    psutil
commands = 
    pytest tests/benchmarks/ --benchmark-only --benchmark-json=benchmark-results.json
setenv = 
    {[testenv]setenv}
    ENABLE_BENCHMARKS = 1

[testenv:mobile]
# Mobile SDK testing (conditional on SDK availability)
deps = 
    {[testenv]deps}
    tensorflow>=2.15.0
    coremltools>=7.0
    onnxruntime>=1.15.0
commands = 
    pytest tests/test_mobile/ -m mobile --run-mobile
setenv = 
    {[testenv]setenv}
    ENABLE_MOBILE_TESTS = 1

[testenv:gpu]
# GPU-specific testing
deps = 
    {[testenv]deps}
    torch[cuda]
commands = 
    pytest tests/ -m gpu --run-gpu
setenv = 
    {[testenv]setenv}
    ENABLE_CUDA_TESTS = 1
passenv = 
    {[testenv]passenv}
    CUDA_*

[testenv:coverage]
# Comprehensive coverage analysis
deps = 
    {[testenv]deps}
    coverage[toml]
    pytest-cov
commands = 
    coverage erase
    pytest --cov=src --cov-report=html --cov-report=xml --cov-report=term
    coverage report --fail-under=80
    coverage html
    coverage xml

[testenv:integration]
# Integration testing with external services
deps = 
    {[testenv]deps}
    docker-compose
commands = 
    docker-compose -f tests/docker-compose.test.yml up -d
    pytest tests/integration/ -m integration
    docker-compose -f tests/docker-compose.test.yml down
setenv = 
    {[testenv]setenv}
    INTEGRATION_TESTS = 1

[testenv:mutation]
# Mutation testing for test quality assessment
deps = 
    {[testenv]deps}
    mutmut
commands = 
    mutmut run --paths-to-mutate src/
    mutmut results
    mutmut html

[testenv:profile]
# Performance profiling
deps = 
    {[testenv]deps}
    py-spy
    memory-profiler
    line-profiler
commands = 
    python -m memory_profiler tests/profile_memory.py
    python -m line_profiler tests/profile_time.py

[testenv:clean]
# Clean up generated files
deps = 
skip_install = true
commands = 
    python -c "
    import shutil, os
    dirs = ['build', 'dist', '.coverage', 'htmlcov', '.pytest_cache', '.mypy_cache', '.tox']
    for d in dirs:
        if os.path.exists(d):
            shutil.rmtree(d)
            print(f'Removed {d}')
    "

# Coverage configuration
[coverage:run]
source = src
parallel = true
branch = true
omit = 
    */tests/*
    */test_*
    */__init__.py
    */conftest.py

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Flake8 configuration
[flake8]
max-line-length = 88
select = E,W,F
ignore = 
    E203  # whitespace before ':'
    E501  # line too long (handled by black)
    W503  # line break before binary operator
exclude = 
    .git,
    __pycache__,
    .tox,
    .coverage,
    htmlcov,
    *.egg-info,
    build,
    dist
per-file-ignores = 
    __init__.py:F401
    tests/*:D,S101