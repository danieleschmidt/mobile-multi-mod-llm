version: '3.8'

services:
  pipeline-guard:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    image: pipeline-guard:production
    container_name: pipeline-guard-main
    restart: unless-stopped
    
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PIPELINE_GUARD_DB_PATH=/app/data/pipeline_guard.db
      - PIPELINE_GUARD_LOG_PATH=/app/logs/pipeline_guard.log
      - CONFIG_PATH=/app/config/production.yaml
      - HEALTH_CHECK_VERBOSE=false
      
    ports:
      - "8080:8080"
      
    volumes:
      - pipeline_data:/app/data
      - pipeline_logs:/app/logs
      - pipeline_config:/app/config:ro
      - pipeline_models:/app/models
      
    networks:
      - pipeline_network
      
    healthcheck:
      test: ["CMD", "python3", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
          
    security_opt:
      - no-new-privileges:true
    
    user: "1000:1000"  # pipeline user
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pipeline-guard.rule=Host(`pipeline-guard.local`)"
      - "traefik.http.routers.pipeline-guard.tls=true"
      - "traefik.http.services.pipeline-guard.loadbalancer.server.port=8080"

  metrics-collector:
    image: pipeline-guard:production
    container_name: pipeline-guard-metrics
    restart: unless-stopped
    command: ["metrics"]
    
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PIPELINE_GUARD_DB_PATH=/app/data/pipeline_metrics.db
      
    volumes:
      - pipeline_data:/app/data
      - pipeline_logs:/app/logs
      - pipeline_config:/app/config:ro
      
    networks:
      - pipeline_network
      
    depends_on:
      - pipeline-guard
      
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: pipeline-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      
    ports:
      - "9090:9090"
      
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
      
    networks:
      - pipeline_network
      
    depends_on:
      - pipeline-guard

  grafana:
    image: grafana/grafana:10.0.0
    container_name: pipeline-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      
    ports:
      - "3000:3000"
      
    volumes:
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana_data:/var/lib/grafana
      
    networks:
      - pipeline_network
      
    depends_on:
      - prometheus

  redis:
    image: redis:7-alpine
    container_name: pipeline-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pipeline123}
    
    ports:
      - "6379:6379"
      
    volumes:
      - redis_data:/data
      
    networks:
      - pipeline_network
      
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  nginx:
    image: nginx:1.25-alpine
    container_name: pipeline-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
      
    volumes:
      - ../docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      
    networks:
      - pipeline_network
      
    depends_on:
      - pipeline-guard
      - grafana

volumes:
  pipeline_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
      
  pipeline_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
      
  pipeline_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/config
      
  pipeline_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/models
      
  prometheus_data:
    driver: local
    
  grafana_data:
    driver: local
    
  redis_data:
    driver: local
    
  nginx_logs:
    driver: local

networks:
  pipeline_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16