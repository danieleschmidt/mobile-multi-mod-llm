# Production-ready Dockerfile for Self-Healing Pipeline Guard
FROM python:3.10-slim-bullseye AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libc6-dev \
    libffi-dev \
    libssl-dev \
    curl \
    wget \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r pipeline && useradd -r -g pipeline pipeline

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements-prod.txt ./
RUN pip install --no-cache-dir -r requirements-prod.txt

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/models /app/config && \
    chown -R pipeline:pipeline /app

# Multi-stage build for production
FROM base AS production

# Copy application code
COPY --chown=pipeline:pipeline src/ ./src/
COPY --chown=pipeline:pipeline scripts/ ./scripts/
COPY --chown=pipeline:pipeline monitoring/ ./monitoring/
COPY --chown=pipeline:pipeline docker/entrypoint.sh ./entrypoint.sh
COPY --chown=pipeline:pipeline docker/healthcheck.py ./healthcheck.py

# Make scripts executable
RUN chmod +x ./entrypoint.sh ./healthcheck.py

# Install the package in production mode
RUN pip install -e . --no-deps

# Security hardening
RUN apt-get update && apt-get upgrade -y && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Switch to non-root user
USER pipeline

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python3 healthcheck.py

# Set entrypoint
ENTRYPOINT ["./entrypoint.sh"]
CMD ["orchestrator"]