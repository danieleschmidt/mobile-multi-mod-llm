# Docker Compose configuration for Mobile Multi-Modal LLM
# Comprehensive setup for development, testing, and production

version: '3.8'

# =============================================================================
# Services Configuration
# =============================================================================
services:
  
  # Development environment
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mobile-multimodal-dev
    volumes:
      - .:/app
      - pip-cache:/home/appuser/.cache/pip
      - torch-models:/home/appuser/.cache/torch
    ports:
      - "8000:8000"  # Development server
      - "8888:8888"  # Jupyter notebook
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app/src
      - TORCH_HOME=/home/appuser/.cache/torch
    stdin_open: true
    tty: true
    networks:
      - mobile-multimodal-net
  
  # Testing environment
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: mobile-multimodal-test
    volumes:
      - .:/app
      - test-results:/app/test-results
      - coverage-reports:/app/coverage-reports
    environment:
      - ENVIRONMENT=testing
      - PYTHONPATH=/app/src
    command: >
      sh -c "
        echo 'Running comprehensive test suite...' &&
        pytest --cov=src --cov-report=html:/app/coverage-reports --cov-report=term-missing --junitxml=/app/test-results/pytest.xml tests/ &&
        echo 'Running security scans...' &&
        bandit -r src/ -f json -o /app/test-results/bandit-report.json &&
        safety check --json --output /app/test-results/safety-report.json
      "
    networks:
      - mobile-multimodal-net
  
  # Production environment
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mobile-multimodal-prod
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - PORT=8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import mobile_multimodal; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mobile-multimodal-net
  
  # GPU-enabled environment (optional)
  app-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu
    container_name: mobile-multimodal-gpu
    volumes:
      - .:/app
      - torch-models:/home/appuser/.cache/torch
    environment:
      - ENVIRONMENT=gpu-training
      - CUDA_VISIBLE_DEVICES=0
      - TORCH_HOME=/home/appuser/.cache/torch
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    stdin_open: true
    tty: true
    networks:
      - mobile-multimodal-net
  
  # Documentation server
  docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mobile-multimodal-docs
    volumes:
      - .:/app
    ports:
      - "8001:8000"
    command: mkdocs serve --dev-addr 0.0.0.0:8000
    environment:
      - ENVIRONMENT=docs
    networks:
      - mobile-multimodal-net
  
  # Mobile development environment
  mobile-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: mobile-dev
    container_name: mobile-multimodal-mobile
    volumes:
      - .:/app
      - android-sdk:/opt/android-sdk
    environment:
      - ENVIRONMENT=mobile-development
      - ANDROID_SDK_ROOT=/opt/android-sdk
    stdin_open: true
    tty: true
    networks:
      - mobile-multimodal-net
  
  # Database for metrics and logging (optional)
  postgres:
    image: postgres:15-alpine
    container_name: mobile-multimodal-db
    environment:
      - POSTGRES_DB=mobile_multimodal
      - POSTGRES_USER=mmllm
      - POSTGRES_PASSWORD=secure_password_123
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mmllm"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mobile-multimodal-net
  
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: mobile-multimodal-redis
    command: redis-server --appendonly yes --requirepass redis_password_123
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mobile-multimodal-net
  
  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mobile-multimodal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mobile-multimodal-net
  
  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mobile-multimodal-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - mobile-multimodal-net

# =============================================================================
# Network Configuration
# =============================================================================
networks:
  mobile-multimodal-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volume Configuration
# =============================================================================
volumes:
  # Application data
  pip-cache:
    driver: local
  torch-models:
    driver: local
  test-results:
    driver: local
  coverage-reports:
    driver: local
  android-sdk:
    driver: local
  
  # Database volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # Monitoring volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# =============================================================================
# Development Profiles
# =============================================================================
# Use with: docker-compose --profile dev up
# Or: docker-compose --profile test up
profiles:
  - dev
  - test
  - prod
  - gpu
  - monitoring