version: '3.8'

services:
  mobile-multimodal-api:
    build:
      context: ../
      dockerfile: deployment/Dockerfile.production
    image: mobile-multimodal:production
    container_name: mobile-multimodal-production
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - HEALTH_CHECK_ENABLED=true
      - MAX_WORKERS=4
      - BATCH_SIZE=8
      - CACHE_SIZE_MB=512
      - MAX_CONCURRENT_REQUESTS=50
      - RATE_LIMIT_PER_MINUTE=1000
      - SECURITY_STRICT_MODE=true
      - MONITORING_ENABLED=true
      - METRICS_EXPORT_INTERVAL=60
    volumes:
      - model_cache:/app/cache
      - metrics_data:/app/metrics
      - logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    resources:
      limits:
        cpus: '2.0'
        memory: 4G
      reservations:
        cpus: '1.0'
        memory: 2G
    security_opt:
      - no-new-privileges:true
    networks:
      - mobile-multimodal-network
    
  redis-cache:
    image: redis:7-alpine
    container_name: mobile-multimodal-redis
    restart: unless-stopped
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mobile-multimodal-network

  prometheus:
    image: prom/prometheus:latest
    container_name: mobile-multimodal-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - mobile-multimodal-network

  grafana:
    image: grafana/grafana:latest
    container_name: mobile-multimodal-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - mobile-multimodal-network

  nginx:
    image: nginx:alpine
    container_name: mobile-multimodal-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    depends_on:
      - mobile-multimodal-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mobile-multimodal-network

volumes:
  model_cache:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  metrics_data:
    driver: local
  logs:
    driver: local

networks:
  mobile-multimodal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16